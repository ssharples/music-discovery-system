"""
AI-Generated Music Detection Agent

This agent analyzes artist data to detect and filter out AI-generated music content.
"""
from pydantic_ai import Agent
from pydantic_ai.models.openai import OpenAIModel
from pydantic_ai.providers.deepseek import DeepSeekProvider
from pydantic import BaseModel, Field
from typing import Dict, Any, List, Optional, Tuple
import logging
import re
from datetime import datetime

from app.core.config import settings
from app.core.dependencies import PipelineDependencies
from app.models.artist import ArtistProfile

logger = logging.getLogger(__name__)

class AIDetectionResult(BaseModel):
    """Result of AI-generated content detection"""
    is_ai_generated: bool
    confidence_score: float = Field(ge=0, le=1)
    detection_reasons: List[str] = Field(default_factory=list)
    flagged_keywords: List[str] = Field(default_factory=list)
    recommendation: str

class AIGeneratedMusicDetector:
    """Agent to detect AI-generated music content"""
    
    # Common AI-generated music indicators
    AI_KEYWORDS = [
        # Direct AI mentions
        "ai generated", "ai music", "artificial intelligence", "machine learning",
        "neural network", "deep learning", "computer generated", "algorithm",
        
        # AI music platforms/tools
        "suno", "udio", "boomy", "aiva", "amper", "jukedeck", "ecrett music",
        "soundraw", "beatoven", "mubert", "musiclm", "riffusion",
        
        # Generic AI descriptions
        "generated by ai", "created by ai", "made with ai", "ai composer",
        "artificial composer", "robot music", "synthetic music", "auto-generated",
        
        # Text-to-music mentions
        "text to music", "prompt to music", "described music", "ai prompt",
    ]
    
    # Suspicious patterns
    SUSPICIOUS_PATTERNS = [
        r"(?i)\b(generated|created|made|composed)\s+(?:by|with|using)\s+ai\b",
        r"(?i)\bai\s+(?:generated|created|made|composed)\b",
        r"(?i)\b(?:artificial|machine)\s+(?:intelligence|learning)\b",
        r"(?i)\btext\s*to\s*music\b",
        r"(?i)\bprompt\s*(?:based|driven)\s*music\b",
    ]
    
    def __init__(self):
        self.agent_name = "AIGeneratedMusicDetector"
        self._agent: Optional[Agent] = None
        self._initialized = False
        logger.info(f"🤖 Initializing {self.agent_name}")
    
    @property
    def agent(self) -> Optional[Agent]:
        """Lazy initialization of PydanticAI agent"""
        if not self._initialized:
            self._initialize_agent()
        return self._agent
    
    def _initialize_agent(self):
        """Initialize agent with error handling"""
        try:
            if settings.is_deepseek_configured():
                self._agent = Agent(
                    model=OpenAIModel('deepseek-chat', provider=DeepSeekProvider()),
                    system_prompt="""You are an expert at detecting AI-generated music content.
                    
                    Your task is to analyze artist descriptions, video titles, channel information,
                    and other metadata to determine if the music content is artificially generated.
                    
                    Key indicators to look for:
                    1. Explicit mentions of AI tools or generation
                    2. Text-to-music or prompt-based creation
                    3. Lack of human artist identity
                    4. Generic or template-like descriptions
                    5. Suspicious channel patterns
                    
                    Be thorough but avoid false positives for human artists who might mention AI tools
                    casually or use them as creative aids rather than primary creation methods.
                    
                    Return confidence scores and clear reasoning."""
                )
                self._initialized = True
                logger.info(f"✅ {self.agent_name} initialized with DeepSeek")
            else:
                logger.warning(f"⚠️ {self.agent_name} not initialized - no AI provider configured")
                
        except Exception as e:
            logger.error(f"❌ Failed to initialize {self.agent_name}: {e}")
            self._agent = None
    
    async def analyze_artist_for_ai_content(
        self,
        artist_profile: ArtistProfile,
        video_metadata: List[Dict[str, Any]] = None,
        deps: PipelineDependencies = None
    ) -> AIDetectionResult:
        """Analyze artist profile and content for AI-generated indicators"""
        
        logger.info(f"🔍 Analyzing {artist_profile.name} for AI-generated content")
        
        try:
            # Collect all text data for analysis
            analysis_data = self._gather_analysis_data(artist_profile, video_metadata or [])
            
            # Step 1: Keyword-based detection (fast)
            keyword_result = self._keyword_based_detection(analysis_data)
            
            # Step 2: Pattern-based detection
            pattern_result = self._pattern_based_detection(analysis_data)
            
            # Step 3: AI-powered analysis (if available and needed)
            ai_result = None
            if self.agent and (keyword_result.confidence_score > 0.3 or pattern_result.confidence_score > 0.3):
                ai_result = await self._ai_powered_analysis(analysis_data, deps)
            
            # Combine results
            final_result = self._combine_detection_results(
                keyword_result, pattern_result, ai_result, artist_profile.name
            )
            
            logger.info(f"✅ AI detection completed for {artist_profile.name}: "
                       f"AI-generated={final_result.is_ai_generated}, "
                       f"confidence={final_result.confidence_score:.2f}")
            
            return final_result
            
        except Exception as e:
            logger.error(f"❌ AI detection failed for {artist_profile.name}: {e}")
            # Return safe default (not AI-generated) on error
            return AIDetectionResult(
                is_ai_generated=False,
                confidence_score=0.0,
                detection_reasons=[f"Analysis failed: {e}"],
                recommendation="Manual review required - detection failed"
            )
    
    def _gather_analysis_data(
        self, 
        artist_profile: ArtistProfile, 
        video_metadata: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """Gather all available text data for analysis"""
        
        data = {
            "artist_name": artist_profile.name,
            "channel_description": artist_profile.metadata.get("channel_description", ""),
            "about_section": artist_profile.metadata.get("about", ""),
            "video_titles": [],
            "video_descriptions": [],
            "all_text": []
        }
        
        # Extract video data
        for video in video_metadata:
            if video.get("title"):
                data["video_titles"].append(video["title"])
                data["all_text"].append(video["title"])
            
            if video.get("description"):
                data["video_descriptions"].append(video["description"])
                data["all_text"].append(video["description"])
        
        # Add profile text
        data["all_text"].extend([
            data["artist_name"],
            data["channel_description"],
            data["about_section"]
        ])
        
        # Clean and combine all text
        data["combined_text"] = " ".join(filter(None, data["all_text"])).lower()
        
        return data
    
    def _keyword_based_detection(self, analysis_data: Dict[str, Any]) -> AIDetectionResult:
        """Fast keyword-based detection"""
        
        combined_text = analysis_data["combined_text"]
        flagged_keywords = []
        detection_reasons = []
        
        # Check for AI keywords
        for keyword in self.AI_KEYWORDS:
            if keyword.lower() in combined_text:
                flagged_keywords.append(keyword)
                detection_reasons.append(f"Found AI keyword: '{keyword}'")
        
        # Calculate confidence based on keyword matches
        confidence = min(len(flagged_keywords) * 0.2, 1.0)
        is_ai_generated = confidence > 0.5
        
        recommendation = "Human artist" if not is_ai_generated else "Likely AI-generated"
        
        return AIDetectionResult(
            is_ai_generated=is_ai_generated,
            confidence_score=confidence,
            detection_reasons=detection_reasons,
            flagged_keywords=flagged_keywords,
            recommendation=recommendation
        )
    
    def _pattern_based_detection(self, analysis_data: Dict[str, Any]) -> AIDetectionResult:
        """Pattern-based detection using regex"""
        
        combined_text = analysis_data["combined_text"]
        detection_reasons = []
        pattern_matches = 0
        
        # Check suspicious patterns
        for pattern in self.SUSPICIOUS_PATTERNS:
            if re.search(pattern, combined_text):
                pattern_matches += 1
                detection_reasons.append(f"Suspicious pattern detected: {pattern}")
        
        # Additional heuristics
        if "no human artist" in combined_text or "fully automated" in combined_text:
            pattern_matches += 2
            detection_reasons.append("Explicit mention of non-human creation")
        
        confidence = min(pattern_matches * 0.25, 1.0)
        is_ai_generated = confidence > 0.6
        
        recommendation = "Human artist" if not is_ai_generated else "Likely AI-generated"
        
        return AIDetectionResult(
            is_ai_generated=is_ai_generated,
            confidence_score=confidence,
            detection_reasons=detection_reasons,
            recommendation=recommendation
        )
    
    async def _ai_powered_analysis(
        self, 
        analysis_data: Dict[str, Any], 
        deps: PipelineDependencies
    ) -> Optional[AIDetectionResult]:
        """Use AI agent for sophisticated analysis"""
        
        if not self.agent:
            return None
        
        try:
            prompt = f"""
            Analyze this music artist data to determine if it's AI-generated content:
            
            Artist Name: {analysis_data['artist_name']}
            Channel Description: {analysis_data['channel_description'][:500]}
            Video Titles: {', '.join(analysis_data['video_titles'][:5])}
            
            Consider:
            1. Explicit AI tool mentions
            2. Lack of human artist identity
            3. Generic or template-like content
            4. Patterns typical of AI-generated music
            
            Respond with JSON:
            {{
                "is_ai_generated": boolean,
                "confidence": float (0-1),
                "reasoning": ["reason1", "reason2"],
                "recommendation": "string"
            }}
            """
            
            result = await self.agent.run(prompt, deps=deps)
            
            if result and hasattr(result, 'data'):
                ai_data = result.data
                return AIDetectionResult(
                    is_ai_generated=ai_data.get("is_ai_generated", False),
                    confidence_score=ai_data.get("confidence", 0.0),
                    detection_reasons=ai_data.get("reasoning", []),
                    recommendation=ai_data.get("recommendation", "Uncertain")
                )
                
        except Exception as e:
            logger.error(f"❌ AI-powered analysis failed: {e}")
        
        return None
    
    def _combine_detection_results(
        self,
        keyword_result: AIDetectionResult,
        pattern_result: AIDetectionResult,
        ai_result: Optional[AIDetectionResult],
        artist_name: str
    ) -> AIDetectionResult:
        """Combine multiple detection results into final verdict"""
        
        # Weight the different detection methods
        weights = {"keyword": 0.3, "pattern": 0.4, "ai": 0.3}
        
        total_confidence = (
            keyword_result.confidence_score * weights["keyword"] +
            pattern_result.confidence_score * weights["pattern"]
        )
        
        all_reasons = (
            keyword_result.detection_reasons + 
            pattern_result.detection_reasons
        )
        
        if ai_result:
            total_confidence += ai_result.confidence_score * weights["ai"]
            all_reasons.extend(ai_result.detection_reasons)
        else:
            # Redistribute AI weight to other methods
            total_confidence = (
                keyword_result.confidence_score * 0.45 +
                pattern_result.confidence_score * 0.55
            )
        
        # Final decision threshold
        is_ai_generated = total_confidence > 0.6
        
        # Generate recommendation
        if is_ai_generated:
            recommendation = f"FILTER OUT - {artist_name} appears to be AI-generated content"
        else:
            recommendation = f"KEEP - {artist_name} appears to be human artist"
        
        return AIDetectionResult(
            is_ai_generated=is_ai_generated,
            confidence_score=total_confidence,
            detection_reasons=all_reasons,
            flagged_keywords=keyword_result.flagged_keywords,
            recommendation=recommendation
        )


# Factory function
def get_ai_detection_agent() -> AIGeneratedMusicDetector:
    """Get AI detection agent instance"""
    return AIGeneratedMusicDetector() 