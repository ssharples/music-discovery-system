-- Music Artist Discovery System Database Schema

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Artists table
CREATE TABLE IF NOT EXISTS artists (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  youtube_channel_id TEXT UNIQUE,
  youtube_channel_name TEXT,
  instagram_handle TEXT,
  spotify_id TEXT,
  email TEXT,
  website TEXT,
  genres TEXT[],
  location TEXT,
  bio TEXT,
  follower_counts JSONB DEFAULT '{}',
  social_links JSONB DEFAULT '{}',
  metadata JSONB DEFAULT '{}',
  discovery_date TIMESTAMPTZ DEFAULT NOW(),
  last_updated TIMESTAMPTZ DEFAULT NOW(),
  enrichment_score FLOAT DEFAULT 0,
  status TEXT DEFAULT 'discovered',
  CONSTRAINT enrichment_score_check CHECK (enrichment_score >= 0 AND enrichment_score <= 1)
);

-- Videos table
CREATE TABLE IF NOT EXISTS videos (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  artist_id UUID REFERENCES artists(id) ON DELETE CASCADE,
  youtube_video_id TEXT UNIQUE NOT NULL,
  title TEXT NOT NULL,
  description TEXT,
  view_count INTEGER DEFAULT 0,
  like_count INTEGER DEFAULT 0,
  comment_count INTEGER DEFAULT 0,
  published_at TIMESTAMPTZ,
  duration INTEGER,
  tags TEXT[],
  captions_available BOOLEAN DEFAULT false,
  metadata JSONB DEFAULT '{}',
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Lyric Analysis table
CREATE TABLE IF NOT EXISTS lyric_analyses (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  video_id UUID REFERENCES videos(id) ON DELETE CASCADE,
  artist_id UUID REFERENCES artists(id) ON DELETE CASCADE,
  themes TEXT[],
  sentiment_score FLOAT,
  emotional_content TEXT[],
  lyrical_style TEXT,
  subject_matter TEXT,
  language TEXT DEFAULT 'en',
  analysis_metadata JSONB DEFAULT '{}',
  created_at TIMESTAMPTZ DEFAULT NOW(),
  CONSTRAINT sentiment_score_check CHECK (sentiment_score >= -1 AND sentiment_score <= 1)
);

-- Discovery Sessions table
CREATE TABLE IF NOT EXISTS discovery_sessions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  started_at TIMESTAMPTZ DEFAULT NOW(),
  completed_at TIMESTAMPTZ,
  artists_discovered INTEGER DEFAULT 0,
  videos_processed INTEGER DEFAULT 0,
  status TEXT DEFAULT 'running',
  metadata JSONB DEFAULT '{}',
  error_logs JSONB DEFAULT '[]',
  CONSTRAINT status_check CHECK (status IN ('running', 'completed', 'failed', 'paused'))
);

-- API Rate Limits tracking
CREATE TABLE IF NOT EXISTS api_rate_limits (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  api_name TEXT NOT NULL,
  endpoint TEXT,
  requests_made INTEGER DEFAULT 0,
  quota_limit INTEGER,
  reset_time TIMESTAMPTZ,
  last_request TIMESTAMPTZ DEFAULT NOW(),
  metadata JSONB DEFAULT '{}'
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_artists_youtube_channel ON artists(youtube_channel_id);
CREATE INDEX IF NOT EXISTS idx_artists_status ON artists(status);
CREATE INDEX IF NOT EXISTS idx_artists_enrichment_score ON artists(enrichment_score DESC);
CREATE INDEX IF NOT EXISTS idx_videos_artist ON videos(artist_id);
CREATE INDEX IF NOT EXISTS idx_videos_youtube_id ON videos(youtube_video_id);
CREATE INDEX IF NOT EXISTS idx_videos_published ON videos(published_at DESC);
CREATE INDEX IF NOT EXISTS idx_lyric_analyses_artist ON lyric_analyses(artist_id);
CREATE INDEX IF NOT EXISTS idx_discovery_sessions_status ON discovery_sessions(status);

-- Create views for common queries
CREATE OR REPLACE VIEW enriched_artists AS
SELECT 
  a.*,
  COUNT(DISTINCT v.id) as video_count,
  COUNT(DISTINCT la.id) as analyzed_videos,
  AVG(la.sentiment_score) as avg_sentiment
FROM artists a
LEFT JOIN videos v ON a.id = v.artist_id
LEFT JOIN lyric_analyses la ON a.id = la.artist_id
GROUP BY a.id;

-- Function to update artist enrichment score
CREATE OR REPLACE FUNCTION update_enrichment_score(artist_uuid UUID)
RETURNS VOID AS $$
DECLARE
  score FLOAT := 0;
  artist_rec RECORD;
BEGIN
  SELECT * INTO artist_rec FROM artists WHERE id = artist_uuid;
  
  -- Base score components
  IF artist_rec.youtube_channel_id IS NOT NULL THEN score := score + 0.1; END IF;
  IF artist_rec.instagram_handle IS NOT NULL THEN score := score + 0.15; END IF;
  IF artist_rec.spotify_id IS NOT NULL THEN score := score + 0.15; END IF;
  IF artist_rec.email IS NOT NULL THEN score := score + 0.2; END IF;
  IF artist_rec.website IS NOT NULL THEN score := score + 0.1; END IF;
  IF array_length(artist_rec.genres, 1) > 0 THEN score := score + 0.1; END IF;
  IF artist_rec.bio IS NOT NULL AND length(artist_rec.bio) > 50 THEN score := score + 0.1; END IF;
  
  -- Social metrics bonus
  IF (artist_rec.follower_counts->>'instagram')::INTEGER > 1000 THEN score := score + 0.05; END IF;
  IF (artist_rec.follower_counts->>'spotify')::INTEGER > 1000 THEN score := score + 0.05; END IF;
  
  UPDATE artists SET enrichment_score = LEAST(score, 1.0), last_updated = NOW() 
  WHERE id = artist_uuid;
END;
$$ LANGUAGE plpgsql;

-- Trigger to update enrichment score on artist update
CREATE OR REPLACE FUNCTION trigger_update_enrichment_score()
RETURNS TRIGGER AS $$
BEGIN
  PERFORM update_enrichment_score(NEW.id);
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_artist_enrichment_score
AFTER INSERT OR UPDATE ON artists
FOR EACH ROW
EXECUTE FUNCTION trigger_update_enrichment_score();

-- Row Level Security Policies
ALTER TABLE artists ENABLE ROW LEVEL SECURITY;
ALTER TABLE videos ENABLE ROW LEVEL SECURITY;
ALTER TABLE lyric_analyses ENABLE ROW LEVEL SECURITY;
ALTER TABLE discovery_sessions ENABLE ROW LEVEL SECURITY;

-- Create policies for public read access
CREATE POLICY "Enable read access for all users" ON artists FOR SELECT USING (true);
CREATE POLICY "Enable read access for all users" ON videos FOR SELECT USING (true);
CREATE POLICY "Enable read access for all users" ON lyric_analyses FOR SELECT USING (true);
CREATE POLICY "Enable read access for all users" ON discovery_sessions FOR SELECT USING (true);

-- Create policies for authenticated write access
CREATE POLICY "Enable insert for authenticated users only" ON artists FOR INSERT WITH CHECK (auth.role() = 'authenticated');
CREATE POLICY "Enable update for authenticated users only" ON artists FOR UPDATE USING (auth.role() = 'authenticated');
CREATE POLICY "Enable insert for authenticated users only" ON videos FOR INSERT WITH CHECK (auth.role() = 'authenticated');
CREATE POLICY "Enable insert for authenticated users only" ON lyric_analyses FOR INSERT WITH CHECK (auth.role() = 'authenticated');